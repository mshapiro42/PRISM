import numpy as np
import pandas as pd
from sklearn import linear_model
from sklearn.model_selection import train_test_split
import json
import re
from io import StringIO
from collections import OrderedDict
import csv
io = StringIO()
pd.set_option('display.float_format', lambda x: '%.3f' % x)
pd.set_option('display.max_columns', 25)
mov = pd.read_csv("processed.csv")
#success_strings = pd.read_csv("success_lists.csv")
#print(success_strings)

textual = ['gen_list', 'producers_list', 'countries_list', 'lang_list', 'cast_list', 'crew_list']
numerical = ['budget', 'popularity', 'success']
model = textual + numerical
success_list = []
for entry in model:
    successDict = {}
    #print(f"For feature {entry}, there are {mov[entry].isna().sum()} NaN values")
    if mov[entry].isna().sum() > 0:
        mov.dropna(subset=[entry], inplace=True)

for entry in model:
    Dict = {}
    for index, row in mov.iterrows():
        if row['success']:
            print(type(row[entry]))
                #print(i)
                #if i in Dict:
                #    Dict[i] += 1
                #else:
                #    Dict[i] = 1

#print(mov.describe(include="all"))
#print(mov[textual].describe(include="all"))

mov_model = mov[model]
mov_target = mov['success']
x_train, x_test, y_train, y_test = train_test_split(mov_model, mov_target, test_size=0.2, random_state=1000)

#print(x_train)
#print(y_train)



# term frequency
# make revenue the target
# success failure
# lime linearly interpretable model explainers on Github
